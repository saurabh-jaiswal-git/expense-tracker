spring:
  application:
    name: expense-tracker
  
  # Database Configuration
  datasource:
    url: jdbc:h2:mem:expensetracker
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
  
  # H2 Console Configuration
  h2:
    console:
      enabled: false
      path: /h2-console
  
  # Security Configuration
  security:
    user:
      name: ${ADMIN_USERNAME:admin}
      password: ${ADMIN_PASSWORD:admin}
  
  # SQL Initialization (only data, not schema)
  sql:
    init:
      mode: always
      data-locations: classpath:data.sql

# Server Configuration
server:
  port: 8080
  # Security headers
  servlet:
    session:
      cookie:
        http-only: true
        secure: false
        same-site: strict

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  security:
    enabled: true

# AI/LLM Configuration
ai:
  llm:
    provider: anthropic # Options: openai, anthropic
    openai:
      api-key: ${OPENAI_API_KEY:} # Use environment variable
      model: gpt-3.5-turbo
      max-tokens: 1000
      temperature: 0.7
    anthropic:
      api-key: ${ANTHROPIC_API_KEY:} # Use environment variable
      model: claude-3-haiku-20240307
      max-tokens: 1000
      temperature: 0.7
  
  analysis:
    enabled: true
    auto-analyze: true
    analysis-interval: 24h
  
  prompts:
    spending-analysis: |
      Analyze the following spending data for user {userId}:
      {transactions}
      
      Provide insights on:
      1. Spending patterns
      2. Category distribution
      3. Potential savings opportunities
      4. Budget recommendations
      
    categorization: |
      Categorize the following transaction description: "{description}"
      Available categories: {categories}
      Return only the category name.
    
    recommendations: |
      Based on the user's financial profile and spending patterns,
      generate 3-5 actionable recommendations to improve financial health.
      
      User Context: {userContext}
      
      Focus on practical, achievable advice.

# Logging Configuration
logging:
  level:
    com.expensetracker: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %-5level - %logger{36} - %msg%n"
  # Mask sensitive data in logs
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %-5level - %logger{36} - %replace(%msg){'Bearer [^\\s]+', 'Bearer ***'}%n"

# Feature Flags Configuration
app:
  features:
    manual-entry: true
    upi-integration: false
    bank-integration: false
    ai-analysis: true
    account-aggregator: false 